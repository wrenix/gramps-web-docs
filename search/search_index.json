{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Research &amp; organize your family tree together","text":"<p>Gramps Web is a web app for collaborative genealogy. It is based on and interoperable with Gramps, the leading open source genealogy desktop application. Gramps Web is free &amp; open source software and puts your privacy and your control of your research data first.</p> <p> </p> <p></p>"},{"location":"#access-to-all-your-data-respecting-privacy","title":"Access to all your data, respecting privacy","text":"<p>Browse all objects in your family tree: people, families, events, places, repositories, sources, citations, media objects, and notes.</p> <p>Choose for each user whether they are allowed to view records marked as private. Private records are filtered out at the database layer for maximum security.</p> <p></p>"},{"location":"#collaborative-editing-adding-data-on-the-go","title":"Collaborative editing &amp; adding data on the go","text":"<p>Grant users the right to add new or editing existing objects.</p> <p>Upload new sources, photos, or create new objects from any device.</p> <p></p>"},{"location":"#interactive-family-tree-graphs","title":"Interactive family tree graphs","text":"<p>Navigate your family tree as an ancestor chart, descendant chart, hourglass chart, or as fan chart, with high-quality interactive graphics and configurable number of generations.</p> <p></p>"},{"location":"#powerful-map","title":"Powerful map","text":"<p>Display all places on an interactive, searchable map.</p> <p>Turn a historical map stored as media object in Gramps into a custom map overlay.</p> <p></p>"},{"location":"#genealogy-blog-included","title":"Genealogy Blog included","text":"<p>Summarize your research in the form of blog stories with pictures. All data is stored in the Gramps database.</p> <p></p>"},{"location":"#fully-internationalized","title":"Fully internationalized","text":"<p>Switch the language of the interface between any of 40 languages translated by the Gramps community.</p> <p></p>"},{"location":"#no-lock-in-data-import-and-export","title":"No lock-in \u2013 data import and export","text":"<p>Apart from being able to import data in various formats including Gramps XML and GEDCOM, Gramps Web makes it easy for users to download all of their data (family tree data, media files, user accounts) anytime, for backup purposes or to move to a different server. Your data is yours alone!</p> <p></p>"},{"location":"#generate-printable-reports","title":"Generate printable reports","text":"<p>Since it's built directly on the core powering Gramps Desktop, you can generate almost all of the reports the desktop app supports right from the browser, including relationship graphs or book reports as PDF.</p> <p></p>"},{"location":"#full-integration-with-gramps-desktop","title":"Full integration with Gramps Desktop","text":"<p>Gramps Web uses the core of Gramps, the most powerful and popular open-source cross-platform desktop application. It does not only use the same data model and database for storing genalogical data, but can also be synchronized both ways using a Gramps addon.</p> <p>Edit your tree on the Web and in the fully-featured desktop app you've grown to love \u2013 they work together seamlessly.</p> <p></p>"},{"location":"#tag-people-in-photos-with-automated-face-detection","title":"Tag people in photos with automated face detection","text":"<p>Collaborate with your relatives to identify ancestors in old family photos. Thanks to automated face detection, tagging people is just two clicks away.</p> <p></p>"},{"location":"#powerful-full-text-search","title":"Powerful full-text search","text":"<p>The search engine supports searching all Gramps object types, including the content of text notes, and supports wildcard syntax and logical operators.</p> <p></p>"},{"location":"#dna-matches-chromosome-browser","title":"DNA matches &amp; chromosome browser","text":"<p>If you have DNA match data from one of the DNA genealogy providers, upload it and store it in a future-proof way and view your matches in an interactive chromosome browser.</p> <p></p>"},{"location":"#integrated-task-management-app","title":"Integrated task management app","text":"<p>Gramps Web comes with an integrated task management app to organize and plan your genealogical research. The tasks are stored as sources in the Gramps database, so they form part of your genealogical data an can be accessed and edited in Gramps Desktop as well.</p> <p> </p>"},{"location":"Configuration/","title":"Server Configuration","text":"<p>Using the default Docker image, all necessary configuration can be made from the browser. However, depending on the deployment, it can be necessary to customize the server configuration.</p> <p>This page lists all methods to change the configuration and all existing configuration options.</p>"},{"location":"Configuration/#configuration-file-vs-environment-variables","title":"Configuration file vs. environment variables","text":"<p>For the settings, you can either use a configuration file or environment variables.</p> <p>When you use the Docker Compose based setup, you can include a configuration file by adding the following list item under the <code>volumes:</code> key in the <code>grampsweb:</code> block:</p> <p><pre><code>      - /path/to/config.cfg:/app/config/config.cfg\n</code></pre> where <code>/path/to/config.cfg</code> is the path to the config file in your server's file system (the right-hand side refers to the path in the container and must not be changed).</p> <p>When using environment variables,</p> <ul> <li>prefix every setting name with <code>GRAMPSWEB_</code> to obtain the name of the environment variable</li> <li>Use double underscores for nested dictionary settings, e.g <code>GRAMPSWEB_THUMBNAIL_CACHE_CONFIG__CACHE_DEFAULT_TIMEOUT</code> will set the value of the <code>THUMBNAIL_CACHE_CONFIG['CACHE_DEFAULT_TIMEOUT']</code> config option</li> </ul>"},{"location":"Configuration/#existing-configuration-settings","title":"Existing configuration settings","text":"<p>The following configuration options exist.</p>"},{"location":"Configuration/#required-settings","title":"Required settings","text":"Key Description <code>TREE</code> The name of the family tree database to use. Show available trees with <code>gramps -l</code>. If a tree with this name does not exist, a new empty one will be created. <code>SECRET_KEY</code> The secret key for flask. The secret must not be shared publicly. Changing it will invalidate all access tokens <p>Info</p> <p>You can generate a secure secret key e.g. with the command</p> <pre><code>python3 -c \"import secrets;print(secrets.token_urlsafe(32))\"\n</code></pre>"},{"location":"Configuration/#optional-settings","title":"Optional settings","text":"Key Description <code>MEDIA_BASE_DIR</code> Path to use as base directory for media files, overriding the media base directory set in Gramps. When using S3, must have the form <code>s3://&lt;bucket_name&gt;</code> <code>SEARCH_INDEX_DIR</code> Path for the full-text search index. Defaults to <code>indexdir</code> relative to the path where the script is run <code>STATIC_PATH</code> Path to serve static files from (e.g. a static web frontend) <code>BASE_URL</code> Base URL where the API can be reached (e.g. <code>https://mygramps.mydomain.com/</code>). This is necessary e.g. to build correct passwort reset links <code>CORS_ORIGINS</code> Origins where CORS requests are allowed from. By default, all are disallowed. Use <code>\"*\"</code> to allow requests from any domain. <code>EMAIL_HOST</code> SMTP server host (e.g. for sending password reset e-mails) <code>EMAIL_PORT</code> SMTP server port. defaults to 465 <code>EMAIL_HOST_USER</code> SMTP server username <code>EMAIL_HOST_PASSWORD</code> SMTP server password <code>EMAIL_USE_TLS</code> Boolean, whether to use TLS for sending e-mails. Defaults to <code>True</code>. When using STARTTLS, set this to <code>False</code> and use a port different from 25. <code>DEFAULT_FROM_EMAIL</code> \"From\" address for automated e-mails <code>THUMBNAIL_CACHE_CONFIG</code> Dictionary with settings for the thumbnail cache. See Flask-Caching for possible settings. <code>CELERY_CONFIG</code> Settings for the Celery background task queue. See Celery for possible settings. <code>REPORT_DIR</code> Temporary directory where the output of running Gramps reports will be stored <code>EXPORT_DIR</code> Temporary directory where the output of exporting the Gramps database will be stored <p>Info</p> <p>When using environment variables for configuration, boolean options like <code>EMAIL_USE_TLS</code> must be either the string <code>true</code> or <code>false</code> (case senitive!).</p>"},{"location":"Configuration/#settings-only-for-postgresql-backend-database","title":"Settings only for PostgreSQL backend database","text":"<p>This is required if you've configured your Gramps database to work with the PostgreSQL addon.</p> Key Description <code>POSTGRES_USER</code> The user name for the database connection <code>POSTGRES_PASSWORD</code> The password for the database user"},{"location":"Configuration/#settings-relevant-for-hosting-multiple-trees","title":"Settings relevant for hosting multiple trees","text":"<p>The following settings are relevant when hosting multiple trees.</p> Key Description <code>MEDIA_PREFIX_TREE</code> Boolean, whether or not to use a separate subfolder for the media files of each tree. Defaults to <code>False</code>, but strongly recommend to use <code>True</code> in a multi-tree setup <code>NEW_DB_BACKEND</code> The database backend to use for newly created family trees. Must be one of <code>sqlite</code>, <code>postgresql</code>, or <code>sharedpostgresql</code>. Defaults to <code>sqlite</code>."},{"location":"Configuration/#example-configuration-file","title":"Example configuration file","text":"<p>A minimal configuration file for production could look like this: <pre><code>TREE=\"My Family Tree\"\nBASE_URL=\"https://mytree.example.com\"\nSECRET_KEY=\"...\"  # your secret key\nUSER_DB_URI=\"sqlite:////path/to/users.sqlite\"\nEMAIL_HOST=\"mail.example.com\"\nEMAIL_PORT=465\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=\"gramps@example.com\"\nEMAIL_HOST_PASSWORD=\"...\" # your SMTP password\nDEFAULT_FROM_EMAIL=\"gramps@example.com\"\n</code></pre></p>"},{"location":"Deployment/","title":"Deploying Gramps Web with Docker","text":"<p>The most convenient option to host Gramps Web on your own server (or virtual server) is with Docker Compose.</p> <p>We will assume that Docker and Docker Compose are already installed in your system. You can use Windows, Mac OS, or Linux as a host system. The supported architectures include not only x86-64 (desktop systems), but also ARM systems such as a Raspberry Pi, which can serve as a low-cost, but powerful (enough) web server.</p> <p>Note</p> <p>You do not need to install Gramps on the server as it is contained in the docker image.</p>"},{"location":"Deployment/#step-1-docker-configuration","title":"Step 1: Docker configuration","text":"<p>Create a new file on the server named <code>docker-compose.yml</code> and insert the following contents: docker-compose.yml.</p> <p>This will generate six named volumes to make sure that all relevant data will persist when restarting the container.</p> <p>Warning</p> <p>The above will make the API available on port 80 of the host machine without SSL/TLS protection. You can use this for local testing, but do not expose this directly to the internet, it is completely insecure!</p>"},{"location":"Deployment/#step-2-secure-access-with-ssltls","title":"Step 2: Secure access with SSL/TLS","text":"<p>The web API must be served to the public internet over HTTPS. There are several options, e.g.</p> <ul> <li>Using docker hosting that includes SSL/TLS automatically</li> <li>Using an Nginx Reverse Proxy with a Let's Encrypt certificate</li> </ul> <p>See Docker with Let's Encrypt for how to set up the former.</p> <p>If you plan to use Gramps Web only on your local network, you can skip this step.</p>"},{"location":"Deployment/#step-3-start-the-server","title":"Step 3: Start the server","text":"<p>Run</p> <pre><code>docker-compose up -d\n</code></pre> <p>On first run, the app will display a first-run wizard that will allow you to</p> <ul> <li>Create and account for the owner (admin) user</li> <li>Set some necessary configuration options</li> <li>Import a family tree in Gramps XML (<code>.gramps</code>) format</li> </ul>"},{"location":"Deployment/#step-4-upload-media-files","title":"Step 4: Upload media files","text":"<p>There are several options for uploading media files.</p> <ul> <li>When using files stored on the same server as Gramps Web, you can mount a directory into the Docker container instead of using a named volume, i.e. <code>/home/server_user/gramps_media/:/app/media</code>instead of <code>gramps_media:/app/media</code>, and upload your media files there.</li> <li>When using media files hosted on S3, you can use he S3 Media Uploader Addon</li> <li>The arguably most convenient option is to use Gramps Web Sync.</li> </ul>"},{"location":"DigitalOcean/","title":"Gramps Web DigitalOcean 1-Click App","text":"<p>Instead of setting up Gramps Web yourself, you can also use the Gramps Web DigitalOcean 1-Click App.</p> <p>As part of the setup procedure, you will have to sign up for an account with DigitalOcean and select a paid plan for the \"droplet\" (virtual machine) to use.</p> <p>Arguably, this is currently the simplest way to deploy your own, self-hosted Gramps Web instance, secured with SSL, without using your own hardware.</p> <p>Info</p> <p>Note that you will be paying DigitalOcean for the hosting services. The Gramps open source project does not provide paid support.</p>"},{"location":"DigitalOcean/#step-1-create-a-digitalocean-account","title":"Step 1: Create a DigitalOcean account","text":"<p>Create an account at DigitalOcean if you don't have one yet.</p>"},{"location":"DigitalOcean/#step-2-create-the-droplet","title":"Step 2: Create the droplet","text":"<ul> <li>Go to Gramps Web 1-Click App and click \"Create Gramps Web Droplet\".</li> <li>Choose a plan with at least 1 GB of RAM.</li> <li>Set up authentication to your droplet</li> <li>Click \"Create Droplet\"</li> </ul>"},{"location":"DigitalOcean/#step-3-set-up-a-domain-name","title":"Step 3: Set up a domain name","text":"<p>You will need a domain name (or subdomain). If you own a domain, point it to the IP address of your droplet. Otherwise, you could use a free service such as DuckDNS.</p>"},{"location":"DigitalOcean/#step-4-log-in-to-your-droplet","title":"Step 4: Log in to your droplet","text":"<p>SSH into your droplet. You should be presented with the message \"Welcome to the Gramps Web DigitalOcean 1-click app setup!\". If this is not the case, wait a few minutes and try again (the installation is not yet finished).</p> <p>The setup script will ask you for the domain name (e.g. <code>mygrampswebinstance.duckdns.org</code>) and an e-mail address (needed for the Let's Encrypt certificate).</p> <p>When this is done, wait for the setup to be completed in the background</p>"},{"location":"DigitalOcean/#step-5-launch-gramps-web","title":"Step 5: Launch Gramps Web","text":"<p>Your Gramps Web instance should now be accessible at the root of your domain, with a valid SSL certificate, and it should be showing the first-run assistant.</p>"},{"location":"LetsEncrypt/","title":"Setting up HTTPS with Let's Encrypt and Docker Compose","text":"<p>When served to the public internet, Gramps Web must use HTTPS encryption.</p> <p>A particularly convenient option is to use a dockerized Nginx reverse proxy with automated Let's Encrypt certificate generation. This is achieved with this docker-compose.yml. (The nginx_proxy.conf needs to be stored in the same directory to allow uploading large media files to Gramps Web.)</p> <p>Please see the acme-companion docs for how to set up your domain.</p>"},{"location":"Postgres/","title":"Using a PostgreSQL database","text":"<p>By default, Gramps uses a file-based SQLite database to store the family tree. This works perfectly fine for Gramps Web and is recommended for most users. However, starting with Gramps Web API version 0.3.0, also a PostgreSQL server with a single family tree per database is supported, powered by the Gramps PostgreSQL Addon.</p>"},{"location":"Postgres/#setting-up-the-postgresql-server","title":"Setting up the PostgreSQL server","text":"<p>You can follow the instructions in the Gramps Wiki to set up the PostgreSQL server.</p> <p>Alternatively, you can also use Docker Compose to run the PostgreSQL server in a container on the same docker host as Gramps Web.</p> <p>Using a dockerized PostgreSQL with Gramps is only complicated by the fact the the default PostgreSQL images do not have any locales installed, which are however needed by Gramps for localized collation of objects. Thus, it is necessary to use a custom Dockerfile. </p> <p>Create a <code>Dockerfile</code> with the following contens in a directory <code>postgres</code> next to your <code>docker-compose.yml</code>:</p> <pre><code>FROM postgres:14\n\nRUN apt-get update &amp;&amp; apt-get install -y locales-all \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n</code></pre> <p>Next, add the following section to your <code>docker-compose.yml</code>:</p> <p><pre><code>  postgres_gramps:\nbuild: ./postgres\nrestart: unless-stopped\nenvironment:\nPOSTGRES_PASSWORD: your_postgres_password\nPOSTGRES_USER: postgres\nvolumes:\n- postgres_data:/var/lib/postgresql/data\n</code></pre> and also add <code>postgres_data:</code> as key under the <code>volumes:</code> section of this YAML file.</p>"},{"location":"Postgres/#importing-a-gramps-family-tree","title":"Importing a Gramps family tree","text":"<p>Again, if you have set up the PostgreSQL server yourself, you can follow the instructions in the Gramps Wiki to import a family tree into the database.</p> <p>Alternatively, if you have followed the Docker Compose instructions above, you can use the following command to import a Gramps XML file located on your docker host:</p> <pre><code>docker-compose run --entrypoint \"\" grampsweb \\\ngramps -C postgres \\\n-i /root/.gramps/grampsdb/my_tree.gramps \\\n--config=database.backend:postgresql \\\n--config=database.host:postgres_gramps \\\n--config=database.port:5432 \\\n--username=postgres --password=your_postgres_password\n</code></pre>"},{"location":"Postgres/#configuring-web-api-for-use-with-the-database","title":"Configuring Web API for use with the database","text":"<p>To configure Web API for use with the PostgreSQL database, add the following under the <code>environment:</code> key of the <code>grampsweb</code> service in <code>docker-compose.yml</code>:</p> <pre><code>      # the PostgreSQL addon assumes the tree name to be\n# equal to the database name and here the default \n# database name of the PostgreSQL image is used\nTREE: postgres\n# The credentials must agree with the ones used for\n# the PostgreSQL container\nPOSTGRES_USER: postgres\nPOSTGRES_PASSWORD: your_postgres_password\n</code></pre>"},{"location":"Postgres/#issues","title":"Issues","text":"<p>In case of issues, please monitor the log output of Gramps Web and the PostgreSQL server. In the case of docker, this is achieved with</p> <pre><code>docker-compose logs grampsweb\ndocker-compose logs postgres_grampsweb\n</code></pre> <p>If you suspect there is an issue with Gramps Web (or the documentation), please file an issue on Github.</p>"},{"location":"Update/","title":"Update Gramps Web","text":"<p>If you are using one of the installation methods based on Docker Compose, updating Gramps Web to the latest version is simple. In the folder where your <code>docker-compose.yml</code> is located, run the following commands</p> <pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre> <p>For minor version jumps of Gramps Web API, this is all that is needed. Do follow the release notes of Gramps Web API though, as there could be breaking changes that require additional attention or configuration changes.</p> <p>Note that the default <code>grampsweb:latest</code> docker image always combines the latest version of the API with the latest version of the frontend. If you want to upgrade the two components separately - which is possible - a more involved setup than described here is necessary.</p>"},{"location":"Users/","title":"User system","text":"<p>Gramps Web is not meant to be exposed to the internet for public access, but only by authenticated users. User accounts can be created by the site owner via the command line or web interface, or by self-registration and subsequent approval by the site owner.</p>"},{"location":"Users/#user-roles","title":"User roles","text":"<p>The following user roles are currently defined.</p> Role Role ID Permissions Guest 0 View non-private objects Member 1 Guest + view private objects Contributor* 2 Member + add objects Editor 3 Contributor + edit and delete objects Owner 4 Editor + manage users Admin 5 Owner + edit other trees in multi-tree setup <p>* Note that the \"Contributor\" role is currently only partially supported; e.g., family objects cannot be added since they imply a modification of the underlying Gramps person objects of family members. It is recommended to use the other roles whenever possible.</p>"},{"location":"Users/#managing-users","title":"Managing users","text":"<p>There are two ways to manage users:</p> <ul> <li>With owner permissions using the web interface</li> <li>On the command line on the server</li> </ul> <p>The owner account required to first access the web app can be added in the onboarding wizard that is automatically launched when accessing Gramps Web with an empty user database. </p>"},{"location":"Users/#managing-users-on-the-command-line","title":"Managing users on the command line","text":"<p>When using Docker Compose, the basic command is</p> <pre><code>docker-compose run grampsweb python3 -m gramps_webapi user COMMAND [ARGS]\n</code></pre> <p>The <code>COMMAND</code> can be <code>add</code> or <code>delete</code>. Use <code>--help</code> for <code>[ARGS]</code> to show the syntax and possible configuration options.</p>"},{"location":"admin/","title":"Getting started with Gramps Web","text":"<p>Gramps Web is a web app that runs on a server and is accessed via the web browser. It is meant to be made accessible to authenticated users via the internet.</p> <p>If you want to use Gramps Web for your genealogical research data, you have to choose one of the following options:</p> <ol> <li>Self-host on your own hardware</li> <li>Self-host in the cloud</li> <li>Sign up for a hosted instance</li> </ol> <p>While the first option gives you maximal flexibility and control, it can also be technically challenging.</p> <p>Tip</p> <p>One of the main principles of Gramps Web is to put users in control of their own data at any time, so migrating data from one instance to another is simple. Don't worry about being locked in after having chosen one of the options!</p>"},{"location":"admin/#self-host-on-your-own-hardware","title":"Self-host on your own hardware","text":"<p>The most convenient way to self-host Gramps Web is via Docker Compose. We also provide Docker images for the ARM architecture, so you can run Gramps Web on a Raspberry Pi in your basement.</p> <p>See Deploy with Docker for setup instructions.</p>"},{"location":"admin/#self-host-in-the-cloud","title":"Self-host in the cloud","text":"<p>Installing Gramps Web can be more challenging than other, simple web applications and is not compatible with ordinary \"shared hosting\" providers. You can sign up for a virtual server and install Gramps Web manually.</p> <p>A simpler option is to use a pre-installed cloud image. One example is our DigitalOcean 1-click app.</p>"},{"location":"admin/#sign-up-for-a-hosted-instance","title":"Sign up for a hosted instance","text":"<p>A hosted Gramps Web is the easiest way to get started with Gramps Web, since no installation or configuration is required.</p> <p>Here is a list of dedicated hosting providers for Gramps Web (the Gramps open source community does not take responsibility for their services):</p> <ul> <li>Grampshub (www.grampshub.com), offered by one of the Gramps Web main contributors</li> </ul>"},{"location":"contribute/","title":"How to contribute to Gramps Web","text":"<p>Thanks for considering to contribute to Gramps Web! Depending on your skills and interests, there are many ways how you can help.</p>"},{"location":"contribute/#help-translating-gramps-web-to-your-language","title":"Help translating Gramps Web to your language","text":"<p>Gramps &amp; Gramps Web support several dozen different languages. Helping to translate the app does not require any programming skills. We use the powerful Weblate online tool for translations. Please see here for instructions on how to get started.</p>"},{"location":"contribute/#help-answering-other-users-questions","title":"Help answering other users' questions","text":"<p>If you are already using Gramps Web, help new users finding the answers to their questions by contributing to discussions in the Gramps Web category of the official Gramps Discourse forum.</p>"},{"location":"contribute/#help-improve-the-documentation","title":"Help improve the documentation","text":"<p>The documentation site you're looking at is hosted on Github. Contributions to improve it are highly welcome. Just submit a pull request to that repository.</p>"},{"location":"contribute/#contribute-to-backend-development-python","title":"Contribute to backend development (Python)","text":"<p>If you are a Python programmer, contribute to the development of the Gramps Web API, which is the backend powering Gramps Web. See Backend development for instructions on how to get started.</p>"},{"location":"contribute/#contribute-to-backend-development-javascript","title":"Contribute to backend development (Javascript)","text":"<p>If you are a web programmer, contribute to the development of Gramps Web's responsive frontend. See Frontend development for instructions on how to get started.</p>"},{"location":"contribute/#contribute-to-the-sync-addon-python","title":"Contribute to the Sync addon (Python)","text":"<p>If you have experience with developing with Python and GTK, contribute to the improvement of The Gramps Web Sync Addon. You can use the development repository for suggesting and submitting improvements.</p>"},{"location":"cpu-limited/","title":"Limit CPU usage","text":"<p>In order to avoid high CPU/RAM usage, it is possible to set the number of workers using the environment variable <code>GUNICORN_NUM_WORKERS</code>.</p> <p>Here, we will take a number of workers = 2. Adjust it according to your needs. It may be a good idea to check the CPU/Threads available before choosing the value:</p> <p>lscpu | grep CPU</p> <p>The easiest way is to declare the variable in the <code>docker-compose.yml</code> file, under the \"environment\".</p> <pre><code>version: \"3.7\"\nservices:\n  grampsweb:\n    environment:\n      GUNICORN_NUM_WORKERS: 2\n</code></pre> <p>Other ways are possible, for example by storing the variable in a file,  and calling it in the startup command:</p> <p>docker compose --env-file ./env up</p> <p>In this case, the <code>env</code> file would contain a single line: GUNICORN_NUM_WORKERS=2</p>"},{"location":"dev/","title":"Gramps Web development: overview","text":"<p>Gramps Web is a web application that consists of two components that are developed separately:</p> <ul> <li>Gramps Web API is a RESTful API written in Python and based on Flask. The source code is hosted at github.com/gramps-project/gramps-web-api. It manages database access and genealogical functions directly leveraging the Gramps Python library. It serves as the backend of Gramps Web. For development documentation, see Backend.</li> <li>Gramps Web Frontend is a Javascript web application that serves as the frontend to Gramps Web. The source code is hosted at github.com/gramps-project/gramps-web. For development documentation, see Frontend.</li> </ul> <p>A note on versioning: Gramps Web API and and the Gramps Web frontend are versioned independently. At present, \"Gramps Web\" \u2013 the combined application \u2013 does not have a separate version number. Both projects adhere to SemVer.</p> <p>If you are not a Python or Javascript developer but would still like to contribute to Gramps Web, check out Contribute.</p>"},{"location":"frontend-config/","title":"Customizing the frontend","text":"<p>The Gramps Web frontend is a Javascript application that is deployed as a set of static HTML, CSS, and Javascript files. Normally, no special configuration is necessary for the frontend. However, some behaviour can be changed by setting appropriate options in the <code>config.js</code> file at the root of the distriubtion.</p> <p>The file should have the following structure:</p> <pre><code>window.grampsjsConfig = {\noption: value\n}\n</code></pre> <p>The following option keys exist.</p> Key Type Description <code>hideRegisterLink</code> boolean If true, hide the registration link on the login page. This should be used for multi-tree deployments. <code>loginRedirect</code> string URL to redirect to when not logged in and navigating to any page other than \"login\" or \"register\" <code>leafletTileUrl</code> string Custom tile URL for Leaflet maps <code>leafletTileSize</code> number Custom tile size for Leaflet maps <code>leafletZoomOffset</code> number Custom zoom offset for Leaflet maps <code>leafletTileAttribution</code> string Custom attribution for Leaflet maps"},{"location":"help/","title":"Get Help","text":"<p>If you run into issues or need help with Gramps Web, please pick one of the following options.</p> <p>Forum  Backend issues  Frontend issues </p> <p>See below for some guidance on where to head first.</p>"},{"location":"help/#asking-questions","title":"Asking questions","text":"<p>The official Gramps Discourse forum has a separate category for Gramps Web. Please use it to ask any questions you may have about Gramps Web, for instance</p> <ul> <li>Questions on the usage of Gramps Web</li> <li>Questions on the configuration of Gramps Web</li> <li>Troubleshooting a deployment of Gramps Web</li> <li>Ideas about improvements to Gramps Web</li> <li>...</li> </ul>"},{"location":"help/#reporting-issues","title":"Reporting issues","text":"<p>If you encounter a problem that you believe is a bug in Gramps Web, please support it via Github.</p> <p>There are two separate Github repositories for the code used in Gramps Web, one for the user interface (\u201cfrontend\u201d) and one for the server code (\u201cbackend\u201d):</p> <ul> <li>Frontend issues</li> <li>Backend issues</li> </ul> <p>If you are unsure where to file an issue, don't worry and just choose either of the two \u2013 the maintainers will be able to transfer the issue if necessary.</p> <p>In either case, please always include the following information in your report:</p> <ul> <li>Details about your setup (e.g. a docker-compose file with sensitive values redacted, or whether your are using a hosted vesion such as Grampshub)</li> <li>Version information. To obtain it, go to the \"System information\" tab on the Settings page in Gramps Web and copy/paste the values in the box, which should look something like this:</li> </ul> <pre><code>Gramps 5.1.6\nGramps Web API 1.5.1\nGramps.js 24.1.0\nlocale: en\nmulti-tree: false\ntask queue: true\n</code></pre>"},{"location":"help/#suggesting-enhancements","title":"Suggesting enhancements","text":"<p>For general ideas and discussion about future improvements, feel free to open a discussion in the forum. You may also want to check the issue pages (see links above) whether a particular feature is already planned or being worked on.</p> <p>For specific enhancements with a limited scope, feel free to directly open an issue with a feature request in the appropriate frontend or backend Github repository.</p>"},{"location":"multi-tree/","title":"Setup for hosting multiple trees","text":"<p>By default, Gramps Web only allows accessing a single family tree database (\u201ctree\u201d), specified in the configuration file.</p> <p>However, starting with version 0.7.0 of the Gramps Web API backend, it is also possible to serve multiple trees from a single installation. However, each user is (currently) tied to a single tree, so this setup is not suited for sharing trees among users, but for hosting multiple isolated Gramps Web instances.</p>"},{"location":"multi-tree/#enable-multi-tree-support","title":"Enable multi-tree support","text":"<p>To enable multi-tree support, the <code>TREE</code> config option must be set to a single asterisk <code>*</code>, e.g. in a configuration file:</p> <pre><code>TREE = \"*\"\n</code></pre> <p>This will make all trees in the server's Gramps database directory accessible (given sufficient user permissions). The tree's ID is the name of the subdirectory. You can list existing trees (names and IDs) with the command</p> <pre><code>python -m gramps_webapi --config /app/config/config.cfg tree list\n</code></pre> <p>In addition, you should set the <code>MEDIA_PREFIX_TREE</code> configuration option to <code>True</code> to ensure media files are stored in separate subfolders. Otherwise, users are able to access media files that belong to a tree they have no permission for!</p>"},{"location":"multi-tree/#add-a-user-account-to-a-specific-tree","title":"Add a user account to a specific tree","text":"<p>To add a user to a specific tree, simply add the <code>--tree TREEID</code> command line option to the add user command. You can also POST to the <code>/users/</code> endpoint with the <code>tree</code> property set in the JSON payload.</p> <p>User names and e-mail addresses are required to be unique across all trees.</p>"},{"location":"multi-tree/#create-a-new-tree","title":"Create a new tree","text":"<p>To create a new tree, it is recommended to POST to the <code>/trees/</code> endpoint rather than using the Gramps CLI. This will use a UUIDv4 as tree ID, which leads to additional security as the name cannot be guessed. Currently, only SQLite is supported for newly created trees.</p>"},{"location":"multi-tree/#authorize","title":"Authorize","text":"<p>To authorize (fetch a token), only user name and password are necessary, like in single-tree mode, since the tree ID is known for each user, so there is no need to provide it.</p>"},{"location":"multi-tree/#migrate-existing-media-files","title":"Migrate existing media files","text":"<p>If you want to migrate an existing Gramps Web instance to multi-tree support and are using local media files, you can simply move them to a subfolder of the original location with the tree ID as name.</p> <p>If you are using media files hosted on S3, you can use the script provided in the <code>scripts</code> directory of the <code>gramps-web-api</code> repository:</p> <pre><code>python scripts/s3_rename.py BUCKET_NAME TREE_ID\n</code></pre> <p>This assumes the relevant access keys are set as environment variables already.</p>"},{"location":"multi-tree/#migrate-existing-user-database","title":"Migrate existing user database","text":"<p>If you want to enable multi-tree support and reuse existing users, you need to assign them to a specific tree. You can use the following command provided for this purpose,</p> <pre><code>python -m gramps_webapi --config /app/config/config.cfg user fill-tree TREE_ID\n</code></pre>"},{"location":"multi-tree/#customize-the-frontend","title":"Customize the frontend","text":"<p>The registration page accessible from the login page does not work in a multi-tree setup, since a tree needs to be specified for registration. It is thus advisable to set <code>hideRegisterLink</code> to <code>true</code> in the frontend configuration.</p>"},{"location":"quickstart/","title":"Try out locally","text":"<p>To try out Gramps Web on your local computer (Linux, Mac, or Windows) without interfering with your Gramps Desktop installation, you can use Docker with the following command:</p> <pre><code>docker run -p \"5055:5000\" -e TREE=new ghcr.io/gramps-project/grampsweb:latest\n</code></pre> <p>This will make a new, empty Gramps Web instance accessible at http://localhost:5055, where you can create an admin user and import a Gramps XML file.</p> <p>Info</p> <p>Since this simple setup does not allow running long tasks in a separate process, importing a large Gramps XML file might fail due to a timeout in the first-run assistant.</p> <p>To use media files from your computer you can mount the Gramps media folder into the container with</p> <pre><code>docker run -p \"5055:5000\" -e TREE=new \\\n-v /path/to/my/gramps_media_folder:/app/media \\\nghcr.io/gramps-project/grampsweb:latest\n</code></pre> <p>Note that this will not persist the changes you make to the database when you restart the container. To properly set up Gramps Web, continue reading about Deployment.</p>"},{"location":"requirements/","title":"Setup Requirements","text":"<p>Gramps Web is a web app that runs on a server and is accessed via the web browser. It is meant to be made accessible to authenticated users via the internet.</p>"},{"location":"requirements/#server-requirements","title":"Server Requirements","text":"<p>The most convenient way to host Gramps Web is via Docker Compose. While this is not possible with ordinary \"shared hosting\" providers, this makes it possible to host the app on Linux, Mac, or Windows; it can be hosted on a virtual server or on a Raspberry Pi (we provide Docker images for the ARM architecture) in your basement.</p> <p>Apart from Docker, you will also need some storage space to store your media files (images, documents).</p> <p>Finally, Gramps Web is only secure when served via HTTPS, so you will require an SSL/TLS certificate. The docs below show how to get one automatically for free from Let's Encrypt.</p>"},{"location":"s3/","title":"Hosting media files on S3","text":"<p>Instead of hosting the media files of the family tree on the same server as the Gramps database, they can also be hosted on Amazon S3 or a different API-compatible object storage service. This strongly reduces storage and traffic requirements for the Gramps Web server.</p>"},{"location":"s3/#preparing-credentials","title":"Preparing credentials","text":"<p>In your AWS (or other object storage service) account, get an access key ID and secret access key (you may first want to create a separate user with a security policy allowing only access to S3).</p>"},{"location":"s3/#upload-media-files","title":"Upload media files","text":"<p>To upload your existing media files to S3, on Linux you can use a local Gramps installation with the S3 Media Uploader Addon, that you can install directly from Gramps desktop. However, some additional configuration is necessary.</p> <p>The addon uses the <code>boto3</code> Python library under the hood. You need to install it first with</p> <pre><code>python3 -m pip install boto3\n</code></pre> <p>On the command line, export the access key ID and secret key to the appropriate environment variables: <pre><code>export AWS_ACCESS_KEY_ID=my_access_key_id\nexport AWS_SECRET_ACCESS_KEY=my_secret_access_key\n</code></pre></p> <p>Now, you can start the uploader by runing the following command,</p> <pre><code>gramps -O \"My Family Tree\" -a tool \\\n-p \"name=s3uploader,bucket_name=my_bucket_name\"\n</code></pre> <p>replacing \"My Family Tree\" with the name of your family tree and <code>my_bucket_name</code> with the complete name of your S3 bucket. You will need a dedicated S3 bucket for your Gramps Web instance. If the bucket does not exist yet, the S3 Uploader Addon will attempt to create it.</p>"},{"location":"s3/#configure-gramps-web","title":"Configure Gramps Web","text":"<p>To use the new S3 bucket as media source for Gramps Web, simply set the <code>MEDIA_BASE_DIR</code> configuration option to <code>s3://my_bucket_name</code>.</p> <p>When using Docker Compose, the easiest option is to add all environment variables to the <code>env</code> block:</p> <pre><code>env:\nAWS_ACCESS_KEY_ID: my_access_key_id\nAWS_SECRET_ACCESS_KEY: my_secret_access_key\nMEDIA_BASE_DIR: s3://my_bucket_name\nAWS_DEFAULT_REGION: eu-central-1\n</code></pre> <p>If you want to use an S3-compatible object storage other than AWS (e.g. GCP or for local testing), set the <code>AWS_ENDPOINT_URL</code> environment variable.</p>"},{"location":"s3/#synchronizing-media-files","title":"Synchronizing media files","text":"<p>To keep media files in sync between a local Gramps installation and S3-hosted Gramps Web media files, the Gramps Web Sync Addon supports file synchronization via the Web API.</p>"},{"location":"dev-backend/","title":"Gramps Web backend development","text":"<p>The backend of Gramps Web is called Gramps Web API. In fact it is more than just an app backend: it provides a RESTful API to read and modify a Gramps database.</p> <p>Gramps Web API is a Python application and is powered by the <code>gramps</code> library itself (which also powers the Gramps Desktop application).</p> <p>In this section of the docs, you can learn how to contribute to Gramps Web API development.</p>"},{"location":"dev-backend/api/","title":"API specification","text":"<p>The full API specification for the Gramps Web API can be found  at https://gramps-project.github.io/gramps-web-api/.</p>"},{"location":"dev-backend/queries/","title":"Manual queries","text":"<p>For backend and frontend development, it can be useful to send manual queries to the Gramps Web API. Using HTTPie and jq, this can be done conveniently including JWT authentication.</p>"},{"location":"dev-backend/queries/#installation","title":"Installation","text":"<p>HTTPie is installed with <code>pip</code>:</p> <pre><code>python3 -m pip install httpie\n</code></pre> <p>You will need HTTPie version 3.0.0 or newer.</p> <p>jq can be installed in Ubuntu via</p> <pre><code>sudo apt install jq\n</code></pre>"},{"location":"dev-backend/queries/#fetching-an-access-token","title":"Fetching an access token","text":"<p>To fetch an access token, query the token endpoint. Assuming your development instance is running on <code>localhost:5555</code>, you can use the command</p> <pre><code>http POST http://localhost:5555/api/token/ username=owner password=owner\n</code></pre> <p>You will see the JSON tokens as output.</p> <p>Using jq, you can also store the access token in an environment variable:</p> <pre><code>export ACCESS_TOKEN=$(http POST http://localhost:5555/api/token/ \\\nusername=owner password=owner | jq -r '.access_token')\n</code></pre> <p>You can now use this token in all API calls that require authentication, e.g.</p> <pre><code>http -A bearer -a $ACCESS_TOKEN GET http://localhost:5555/api/metadata/\n</code></pre> <p>Note that, by default, access tokens will expire after 15 minutes.</p>"},{"location":"dev-backend/setup/","title":"Development setup","text":"<p>This page lists the steps required to start developing Gramps Web API. It will be assumed that you are using Ubuntu Linux.</p>"},{"location":"dev-backend/setup/#python-version","title":"Python version","text":"<p>The Web API requires Python 3.7 or newer.</p>"},{"location":"dev-backend/setup/#install-gramps","title":"Install Gramps","text":"<p>The Web API requires the Gramps Python library to be importable. Starting from Gramps 5.2.0, it will be installable via <code>pip</code>. Right now, development is still based on Gramps 5.1.x, so the most convenient option is to install the Gramps <code>apt</code> package on Ubuntu</p> <pre><code>sudo apt install gramps\n</code></pre> <p>Info</p> <p>Note that using the <code>gramps</code> Python package from Gramps installed with <code>apt</code> requires using the system Python interpreter, so you cannot work in a virtual environment.</p>"},{"location":"dev-backend/setup/#clone-the-web-api-repository","title":"Clone the Web API repository","text":"<p>Clone the Web API to your PC (assuming you have set up an SSH key with Github) using</p> <pre><code>git clone git@github.com:gramps-project/gramps-web-api.git\ncd gramps-web-api\n</code></pre>"},{"location":"dev-backend/setup/#install-prerequisites","title":"Install prerequisites","text":"<p>To start development, please install the dependencies by running <pre><code>pip3 install -r requirements-dev.txt\n</code></pre></p>"},{"location":"dev-backend/setup/#install-the-library-in-editable-mode","title":"Install the library in editable mode","text":"<p>Run <pre><code>pip3 install -e . --user\n</code></pre></p>"},{"location":"dev-backend/setup/#set-up-pre-commit-hooks","title":"Set up pre-commit hooks","text":"<p>To set up the pre-commit hooks for the repository, run <pre><code>pre-commit install\n</code></pre> in the repository root. This will e.g. make sure that all source files are nicely formatted with <code>black</code>.</p>"},{"location":"dev-backend/setup/#run-tests","title":"Run tests","text":"<p>To run the unit tests, run <pre><code>pytest\n</code></pre> in the repository root.</p>"},{"location":"dev-backend/setup/#generate-a-configuration-file","title":"Generate a configuration file","text":"<p>Example content:</p> <pre><code>TREE=\"My Family Tree\"\nSECRET_KEY=\"not_secure_enough\"\nUSER_DB_URI=\"sqlite:///users.sqlite\"\n</code></pre> <p>Warning</p> <p>Do not use this configuration in production.</p> <p>See Configuration for a full list of config options.</p> <p>Warning</p> <p>Do not use your production database for development, but use a copy of it or the Gramps example database.</p>"},{"location":"dev-backend/setup/#add-users","title":"Add users","text":"<p>You can add a user with owner permissions by running <pre><code>python3 -m gramps_webapi --config path/to/config user add owner owner --role 4\n</code></pre> This uses username and password <code>owner</code>.</p>"},{"location":"dev-backend/setup/#run-the-app-in-development-mode","title":"Run the app in development mode","text":"<p>Run <pre><code>python3 -m gramps_webapi --config path/to/config run\n</code></pre> The API will be accesible at <code>http://127.0.0.1:5000</code> by default, which displays an empty page.  Access your Gramps data using the API described by gramps-project.github.io/gramps-web-api. For example, to show people go to <code>http://127.0.0.1:5000/api/people</code></p> <p>To choose a different port, add the <code>--port</code> option.</p>"},{"location":"dev-frontend/","title":"Gramps Web frontend development","text":"<p>The Gramps Web frontend is written in Javascript and built using web components with Lit. This allows encapsulating functionality into reusable components.</p> <p>The frontend is designed as a progressive single-page web app with a mobile-first experience. It makes heavy use of Material Web Components for a Material Design look and feel.</p>"},{"location":"dev-frontend/architecture/","title":"Architecture","text":""},{"location":"dev-frontend/architecture/#components","title":"Components","text":"<p>The frontend is built out of web components. They are defined in the Javascript files in the <code>src</code> directory.</p> <p>Typically, each file defines one component, starting with <pre><code>class GrampsjsSomeElement extends LitElement\n</code></pre> and ending with <pre><code>customElements.define('grampsjs-some-element', GrampsjsSomeElement)`\n</code></pre> that defines the new HTML element <code>grampsjs-some-element</code> that can be used elsewhere.</p> <p>The main entrypoint, included in <code>index.html</code> , is the <code>gramps-js</code> element defined in <code>GrampsJs.js</code>. This contains the definition of all individual pages (that correspond simply to elements that are shown or hidden based on the route/URL), the menu, and routing.</p> <p>The components in the <code>src/views</code> directory usually corresponds to full-page components that fetch data from the backend (e.g., the people list view), while components in <code>src/components</code> are usually smaller building blocks used inside the views that get their data from attributes provided by their parent element. However, this separation is not strict.</p>"},{"location":"dev-frontend/architecture/#data-flow","title":"Data flow","text":"<p>Data is exchanged with the Backend/API via the <code>apiGet</code>, <code>apiPut</code>, and <code>apiPost</code> methods in <code>src/api.js</code>, which automatically take care of authentication.</p> <p>Data is passed from parent components to child components via properties (see e.g. the Lit documentation).</p> <p>When data needs to be fed back from a child to a parent component, custom events are used that can be fired with the <code>fireEvent</code> function in <code>src/api.js</code> and listened to using Lit's <code>@</code> syntax (docs).</p>"},{"location":"dev-frontend/architecture/#authentication","title":"Authentication","text":"<p>The refresh token and authentication token are stored in the browser's local storage. Whenever an API call is made and the token is expired, the stored refresh token is used to fetch a new access token and the API call is repeated.</p> <p>The user's authorization scope, which is stored in the access token's claims, is obtained with the <code>getPermissions</code> function and used in the top-level <code>GrampsJs</code> element to set the boolean properties <code>canAdd</code>, <code>canEdit</code>, <code>canManageUsers</code>, which are flowed down to child elements to implement authorization-specific functionality.</p>"},{"location":"dev-frontend/build/","title":"Build","text":"<p>To build the frontend for deployment, run <pre><code>npm run build\n</code></pre></p>"},{"location":"dev-frontend/setup/","title":"Development setup","text":"<p>This page describes the steps needed to start with frontend development. It is assumed that you are using Ubuntu Linux and you will need Docker, docker-compose, and git.</p>"},{"location":"dev-frontend/setup/#step-1-clone-the-repository","title":"Step 1: Clone the repository","text":"<p>Clone the frontend repository <pre><code>git clone git@github.com:gramps-project/gramps-web.git\ncd gramps-web\n</code></pre></p>"},{"location":"dev-frontend/setup/#step-2-build-and-start-the-development-containers","title":"Step 2: Build and start the development containers","text":"<p>To build and start the containers running the Gramps Web backend with the Gramps example database, as well as the frontend in development mode, simply run</p> <pre><code>docker-compose up -d\n</code></pre> <p>Options for logging in are: owner, editor, contributor, guest or member (use same word for both username and password).</p> <p>Warning</p> <p>Do not use the development server in production.</p> <p>As part of the build process, git hooks for formatting and linting will be installed as well.</p>"},{"location":"dev-frontend/setup/#usage-instructions","title":"Usage instructions","text":"<p>Once the containers are up and running, Gramps Web will be accessible at http://localhost:5555.</p> <p>Info</p> <p>Note since the <code>*.json</code> translation files are imported with the new syntax suggested in T39, you must use the Chrome or Chromium browser for the development server to work without errors. This issue is about to change in the future.</p> <p>Once you make changes to the frontend code, you browser will be reloaded automatically.</p> <p>The installed git hooks will format and lint the code on every commit. You can run the scripts manually using</p> <p><pre><code>docker-compose run gramps-frontend format\n</code></pre> and <pre><code>docker-compose run gramps-frontend lint\n</code></pre> respectively.</p>"},{"location":"dev-frontend/translation/","title":"Translation","text":"<p>Gramps Web leverages the translations of Gramps Desktop provided by the community for over 40 languages. The additional strings that only needed for the Web app are translated via Weblate.</p> <p>To contribute, follow the instructions in the Gramps Wiki to get started with Weblate for Gramps. Once authenticated, you can start translating strings both for Gramps Desktop and Gramps Web.</p>"},{"location":"user-guide/","title":"Introduction","text":"<p>This section contains the documentation for users of Gramps Web.</p>"},{"location":"user-guide/blog/","title":"Use the built-in blog","text":"<p>The blog is meant for presenting stories about your family history research.</p> <p>In the Gramps database, blog posts are represented as sources with a note attached, containg the blog's text, and optionally, media files for the images of the blog post. Gramps Web treats every source with a tag <code>Blog</code> as blog article.</p>"},{"location":"user-guide/blog/#add-a-blog-post","title":"Add a blog post","text":"<p>To add a blog post, you can use Gramps Web or Gramps Dekstop (synchronized with Gramps Web), the steps are the same in both cases:</p> <ul> <li>Add a new source. The title of the source will be the title of your blog post, the author of the source will be the author of the post.</li> <li>Optionally, associate the source with a repository corresponding to your Gramps Web blog</li> <li>Add a new note to the source. Write your blog post and copy the text into the note.</li> <li>Optionally, add one or more media files to your source. The first media file will be taken as the post preview picture shown above the text. All media files will be shown below the text as a gallery.</li> <li>Add the label <code>Blog</code> to the source (create it if it doesn't exist)</li> </ul>"},{"location":"user-guide/blog/#relation-between-blog-and-sources","title":"Relation between blog and sources","text":"<p>Since blog posts are just sources, all blog articles also appear on the list of sources and show up as sources in searches. In the source view, there is a button \"show in blog\" that will take you to the blog view for that blog post. The URL of the blog post also contains the Gramps ID of the corresponding source, so an article at <code>yourdomain.com/blog/S0123</code> corresponds to the source at <code>yourdomain.com/source/S0123</code>.</p> <p>At the bottom of every blog post, there is a button \"details\" that will take you to the source view.</p>"},{"location":"user-guide/dna/","title":"DNA segment map","text":"<p>The DNA segment map view, accessible under the \"DNA\" tab in the person view, shows DNA matches with other people in the tree as segments highlighted on the person's chromosomes.</p> <p>This feature does not rely on raw DNA data being uploaded to Gramps Web, but on the segment match data directly, which can be obtained from websites like Gedmatch or MyHeritage.</p> <p>The DNA segment map is based on the Gramplet Addon that provides the same functionality in Gramps Desktop. Its wiki page contains more details about how to obtain the data, how to interpret it, and how to enter the data in Gramps.</p> <p>The data is added as notes attached to associations (or attached to association citations), which is possible directly in Gramps Web.</p>"},{"location":"user-guide/export/","title":"Export data","text":""},{"location":"user-guide/export/#back-up-your-family-tree","title":"Back up your family tree","text":"<p>To create a backup of your family tree, open the Export page in Gramps Web and select the Gramps XML format.</p> <p>Clicking on \"export\" will generate the file and start the download once it is ready.</p> <p>Note that if your Gramps Web user does not have permission to view private records, the export will not be a full backup, since it will not contain any private records.</p>"},{"location":"user-guide/export/#share-your-family-tree-with-users-of-other-genealogy-programs","title":"Share your family tree with users of other genealogy programs","text":"<p>When sharing genealogical data as Gramps XML is not an option, you can also export a GEDCOM file. Note that this is not suited as a backup of your Gramps Web tree.</p>"},{"location":"user-guide/export/#back-up-your-media-files","title":"Back up your media files","text":"<p>To back up your media files, you can create and download a ZIP archive of all media files on the Export page.</p> <p>Note that, especially for large trees, this can be an expensive operation for the server and should only be done if absolutely necessary.</p> <p>A better option to back up your media files on a regular basis is to use the Gramps Web Sync addon (which itself is not a backup solution) and create incremental backups on your local computer.</p> <p>In both bases, if your Gramps Web user does not have permission to view private records, the export will not contain files of private media objects.</p>"},{"location":"user-guide/export/#move-to-a-different-gramps-web-instance","title":"Move to a different Gramps Web instance","text":"<p>Gramps Web does not lock you in with a specific provider and you can always move to a different Gramps Web instance without loosing any data, and without having direct access to either of the servers.</p> <p>To achieve a full migration, follow these steps (assuming you have tree owner permissions):</p> <ol> <li>Go to the Export page and export your tree as a Gramps XML (<code>.gramps</code>) file. If you use the Sync addon, you can also generate the export in Gramps desktop.</li> <li>On the Export page, generate &amp; download a media archive. If you use the Sync addon, you can also simply ZIP your local Gramps media folder.</li> <li>Go to Settings &gt; Administration &gt; Manage users and click the \"Export user details\" button. It will download a JSON file.</li> <li>In the new Gramps Web instance, open the Import page. Import the <code>.gramps</code> file exported in step 1.</li> <li>On the Import page of the new Gramps Web instance, upload the media archive (ZIP).</li> <li>Go to Settings &gt; Administration &gt; Manage users of the new Gramps Web instance. Click the \"Import user accounts\" button and upload the JSON file downloaded in step 3.</li> </ol> <p>Note that, while your user accounts will be migrated, all your users will need to set new passwords by using the \"forgot password\" link, since passwords are stored in encrypted form and cannot be exported.</p>"},{"location":"user-guide/first-login/","title":"First login","text":"<p>When logging in to Gramps Web for the first time, a form will be displayed requiring the user to select a language for the frontend and a home person.</p> <p>This home person does not have to coincide with the home person in Gramps desktop \u2013 it is a personal setting for every user of Gramps Web. The home person is used e.g. for the initial view of the family tree. A typical choice would be for a user to select themselves as home person.</p> <p>To select a person as home person, start typing in the text field and a drop-down list with matches will appear.</p> <p>The language and home person settings are stored in the browser's local storage, so they will persist on a given device.</p>"},{"location":"user-guide/import/","title":"Import data","text":""},{"location":"user-guide/import/#prepare-your-gramps-database","title":"Prepare your Gramps database","text":"<p>If you are using Gramps Desktop, there are two steps to prepare your database to make sure everything will run smoothly in the following. If you are migrating from a different genealogy program, you can skip this step.</p> <ol> <li>Check and repair the database<ul> <li>Optional: create a database backup by exporting to Gramps XML</li> <li>Run the Check and repair database tool. This fixes some internal inconsistencies that could lead to problems in Gramps Web.</li> </ul> </li> <li>Convert media paths to relative<ul> <li>Use the Gramps Media Manager to convert all media paths from absolute to relative. Note that even with relative paths, any media files outside of your Gramps media directory will not work properly when synchronized with Gramps Web.</li> </ul> </li> </ol>"},{"location":"user-guide/import/#import-genealogical-data","title":"Import genealogical data","text":"<p>To import an existing family tree, use the \"Import\" page and upload a file in any of the file formats supported by Gramps \u2013 see Import from another genealogy program in the Gramps Wiki.</p> <p>If you already use Gramps Desktop, it is strongly recommended to use the Gramps XML (<code>.gramps</code>) format to ensure your online and offline trees use the same identifiers and can be synchronized.</p>"},{"location":"user-guide/import/#why-no-support-for-gramps-xml-package","title":"Why no support for Gramps XML package?","text":"<p>While Gramps XML (<code>.gramps</code>) is the preferred format for importing data, Gramps XML package (<code>.gpkg</code>) is not supported by Gramps Web. This is because the import and export routines for media files are not suited for use on a web server.</p> <p>To import the media files belonging to an imported <code>.gramps</code> file, see the next section.</p>"},{"location":"user-guide/import/#import-media-files","title":"Import media files","text":"<p>If you have uploaded a family tree and need to upload the corresponding media files, you can use the \"import media archive\" button on the \"Import\" page.</p> <p>It expects a ZIP file with the missing media files inside. The folder structure in the ZIP file does not have to be the same as the folder structure inside the Gramps media folder as the files are matched to media objects by their checksum.</p> <p>Note that this feature only works for files that have the correct checksum in the Gramps database (which should be ensured by running the check and repair tool in the first step).</p> <p>When moving to Gramps Web from a different genalogy program including media files, it is recommended to first import everything into Gramps Desktop, which has more options to associate existing media files with an imported tree.</p>"},{"location":"user-guide/media/","title":"Add media files","text":"<p>There are two ways to add a new media file (an image, audio file, video file, or any other file):</p>"},{"location":"user-guide/media/#add-a-new-standalone-media-file","title":"Add a new standalone media file","text":"<p>To add a standalone media file, click the + icon in the top app bar and select \"Media Object\".</p> <p>Click on \"select a file\" to select a file from your computer. On a mobile device, clicking this button will give you the option of directly taking a photo with your device's camera.</p> <p>Optionally,</p> <ul> <li>enter a description of the media file under \"title\"</li> <li>enter a date</li> <li>set the media file as private (which will make it visible only to users with sufficient authorization)</li> </ul> <p>Click \"add\" to upload the file and create the media object.</p>"},{"location":"user-guide/media/#add-a-new-media-file-and-link-it-to-another-object","title":"Add a new media file and link it to another object","text":"<p>The following object types in Gramps can have media objects attached: people, families, events, places, sources, and citations.</p> <p>In the detail view of any object, click the blue edit button in the bottom right (if you do not see it, your user does not have edit permissions). Click on the \"gallery\" tab and click the blue + button.</p> <p>A dialog will open that offers the same fields as described in the previous section. Click \"save\" to upload the file, add a new media object, and link it to the viewed object.</p>"},{"location":"user-guide/owner/","title":"Create an account for the tree owner","text":"<p>Before you can start using Gramps Web, you need to create an account for the tree owner. If no user account exists for a given tree, a form will be shown to create an account. The form depends on the server setup being for a single tree or for multiple trees.</p>"},{"location":"user-guide/owner/#single-tree-setup-create-admin-account","title":"Single-tree setup: create admin account","text":"<p>On a server with single-tree setup, when no user account exists yet, opening Gramps Web shows a form to create an admin account. The admin user will be both the owner of the (single) tree and the administrator of the installation. The form also allows setting the e-mail configuration needed for e-mail notifications (e.g. resetting a user password). If the e-mail configuration has already been added via a configuration file or environment variables on the server, this part of the form can be left empty.</p> <p>The form also allows to import genealogical data by uploading a file. This can also be done later from the \"Import\" page in Gramps Web (see Import data).</p>"},{"location":"user-guide/owner/#multi-tree-setup-create-admin-account","title":"Multi-tree setup: create admin account","text":"<p>In a multi-tree setup, the same form to create an admin account will be shown if no users exists in any tree, i.e. when the server has just been created.</p>"},{"location":"user-guide/owner/#multi-tree-setup-create-tree-owner-account","title":"Multi-tree setup: create tree owner account","text":"<p>In a multi-tree setup, every user is tied to a single tree. Even if users already exist in other trees, a tree owner can be created in the web interface if no owner exists for this tree yet.</p> <p>However, the owner creation form will not be displayed automatically on the Gramps Web home page, which is the same for all trees. Instead, it can be reached at <code>https://my-gramps-instance/firstrun/my-tree-id</code>, where  <code>https://my-gramps-instance</code> is the base address of your Gramps Web installation, and <code>my-tree-id</code> is the ID of your tree.</p> <p>A possible workflow for a site administrator to create a new tree is to</p> <ul> <li>Create a tree via the REST API, obtaing the tree ID of the new tree</li> <li>Share the link to the owner creation form with the appropriate tree ID with the prospective tree owner</li> </ul> <p>The tree owner creation form is analogous to the admin creation form described above, except that it does not allow to change the e-mail configuration (which is only allowed for admins).</p>"},{"location":"user-guide/registration/","title":"Registration","text":"<p>In a single-tree installation, anybody can register a new account at a Gramps Web instance, but it will need to be enabled manually by a site owner before it can be used to log in.</p> <p>In a multi-tree installation, users additionally require the tree ID to sign up; in practice, this means they can sign up using a registration link shared by the tree owner.</p>"},{"location":"user-guide/registration/#1-find-registration-form","title":"1. Find registration form","text":"<p>On the login form on the home page of Gramps Web, usually there is a link \"Register new account\".</p> <p>If this link is missing, it is probably because it is a multi-tree installation of Gramps Web. In that case, contact the tree owner for a registration link.</p> <p>The tree owner can find and copy the registration link under Settings/Administration.</p>"},{"location":"user-guide/registration/#2-submit-registration-form","title":"2. Submit registration form","text":"<p>The registration form has four mandatory fields: username, password, e-mail address, and full name. When all four fields have been filled, click \"submit\" to start the registration process.</p>"},{"location":"user-guide/registration/#3-confirm-e-mail-address","title":"3. Confirm e-mail address","text":"<p>After the form has been submitted, an automated e-mail will be sent to the e-mail address provided containing an e-mail confirmation link. Clicking it will open a confirmation page.</p> <p>If the confirmation e-mail does not arrive (and you have checked your Spam folder), it could be that e-mail has not been configured correctly by the Gramps Web server administrator.</p>"},{"location":"user-guide/registration/#4-enable-account","title":"4. Enable account","text":"<p>After the e-mail address has been confirmed, the tree owner will receive an e-mail notification and can enable the new user account by going to the \"User administration\" section in settings page (accessible via the user icon in the top app bar) and changing the user role from \"disabled\" to any of the other roles.</p> <p>Note that the new user will not receive an automated notification that their account has been enabled, so it is advisible for the administrator to notify them personally.</p>"},{"location":"user-guide/sync/","title":"Synchronize Gramps Web and Gramps Desktop","text":"<p>Gramps Web Sync is an addon for Gramps that allows to synchronize your Gramps database on your desktop computer with Gramps Web, including media files.</p> <p>Warning</p> <p>As with any synchronization tool, please do not consider this as a backup tool. An accidental deletion on one side will be propagated to the other side. Make sure to create regular backups (in Gramps XML format) of your family tree.</p> <p>Using Gramps Web Sync requires tree owner permissions in Gramps Web.</p>"},{"location":"user-guide/sync/#installation","title":"Installation","text":"<p>The addon requires Gramps 5.1 running on Python 3.7 or newer. It is available in Gramps Desktop and can be installed in the usual way.</p> <p>Optional step:</p> <ul> <li>Install <code>keyring</code> (e.g. <code>sudo apt install python3-keyring</code>) to allow storing the API password safely in your system's password manager </li> </ul>"},{"location":"user-guide/sync/#usage","title":"Usage","text":"<p>Once installed, the addon is availabe in Gramps under Tools &gt; Family Tree Processing &gt; Gramps\u00a0Web\u00a0Sync. Once started, and after confirming the dialog that the undo history will be discarded, the tool will ask you for the base URL (example: <code>https://mygrampsweb.com/</code>) of your Gramps Web instance, your username, and password. You need an account with owner privileges To sync changes back to your remote database. The username and URL will be stored in plain text in your Gramps user directory, the password will only be stored if <code>keyring</code> is installed (see above).</p> <p>If there are any changes, the tool will display a confirmation dialog before applying the changes. (At present, the confirmation dialog only shows the Gramps IDs of the affected objects.)</p>"},{"location":"user-guide/sync/#media-file-synchronization","title":"Media file synchronization","text":"<p>After the databases have been synchronized, the tool checks for any new or updated media files. It displays the files missing locally or on the remote server and, upon user confirmation, tries to download and upload the files.</p> <p>Limitations:</p> <ul> <li>If a local file has a different checksum from the one stored in the Gramps database (this can happen e.g. for Word files when edited after being added to Gramps), the upload will fail with an error message.</li> <li>The tool does not check integrity of all local files, so if a local file exist under the path stored for the media object, but the file is different from the file on the server, the tool will not detect it. Use the Media Verify Addon to detect files with incorrect checksums.</li> </ul>"},{"location":"user-guide/sync/#background-how-the-addon-works","title":"Background: how the addon works","text":"<p>The addon is meant to keep a local Gramps database in sync with a remote Gramps Web database, to allow both local and remote changes (collaborative editing).</p> <p>It is not suited</p> <ul> <li>To synchronize with a database that is not direct derivative (starting from a database copy or Gramps XML export/import) of the local database</li> <li>To merge two databases with a large number of changes on both sides that need manual attention for merging. Use the excellent Import Merge Tool for this purpose.</li> </ul> <p>The principles of operation of the tool are very simple:</p> <ul> <li>It compares the local and remote databases</li> <li>If there are any differences, it checks the timestamp of the latest identical object, let's call it t</li> <li>If an object changed more recently than t exists in one database but not the other, it is synced to both (assume new object)</li> <li>If an object changed the last time before t is absent in one database, it is deleted in both (assume deleted object)</li> <li>If an object is different but changed after t only in one database, sync to the other one (assume modified object)</li> <li>If an object is different but changed after t in both databases, merge them (assume conflicting modification)</li> </ul> <p>This algorithm is simple and robust as it does not require tracking syncrhonization history. However, it works best when you synchronize often.</p>"},{"location":"user-guide/tagging/","title":"Tag people in photos","text":"<p>Gramps Web allows tagging people in photographs, similar to Gramps Desktop, linking the person and the media object. This is simplified by automated face detection.</p> <p>To tag a person in a photo, follow these steps:</p> <ul> <li>Open the detail view of the media object, e.g. by clicking on \"show details\" in the full-screen preview.</li> <li>Click the blue edit button in the bottom-right corner. If you do not see this button, your user does not have edit permissions.</li> <li>Overlayed on the image, you will see boxes with dashed border corresponding to detected facial regions. To tag a person, click on the box to highlight it and click tge \"person\" button to select an existing person.</li> <li>To manually draw a rectangle instead, click the   button</li> <li>To delete an existing tag, select an existing rectangle (with a solid border) and click the   button</li> </ul>"},{"location":"user-guide/tasks/","title":"Use the built-in task management","text":"<p>Gramps Web contains a built-in genealogical task management tool. It is meant to enable reserarches to plan and prioritize, but also document their tasks. This is why tasks are represented as sources in the Gramps database. After completing a task, the associated content can serve as a source documenting the research process.</p>"},{"location":"user-guide/tasks/#task-basics","title":"Task basics","text":"<p>Tasks have the following properties:</p> <ul> <li>Status. This can be \"Open\", \"In Progress\", \"Blocked\", or \"Done\"</li> <li>Priority. This can be \"Low\", \"Medium\", or \"High\"</li> <li>Tags. The labels are normal Gramps tags of the underlying source. (Note that all tasks additionally have the <code>ToDo</code> label to identify them as tasks, but this label is hidden in the task list to avoid clutter.)</li> <li>Title. Shown in the task list</li> <li>Description. A rich-text field that can be used to describe the problem statement, but also document any progress made</li> <li>Media. Any media files attached to the task</li> </ul>"},{"location":"user-guide/tasks/#create-a-task","title":"Create a task","text":"<p>Since tasks are normal Gramps objects, they can be edited or created by the same group of users that can edit or create other objects (like people or events).</p> <p>To create a task, click on the + button on the task list page. Enter at least a title. The status will always be \"Open\" on creation.</p>"},{"location":"user-guide/tasks/#edit-a-task","title":"Edit a task","text":"<p>To any of the task's details, click on it in the task list.</p> <p>The task detail page does not have a separate \"edit mode\" like other Gramps objects. Changes to the title, status, and priority are applied immediately. Changes to the rich-text description require clicking the \"save\" button beneath it.</p>"},{"location":"user-guide/tasks/#bulk-change-of-task-properties","title":"Bulk change of task properties","text":"<p>The priority and status of tasks can be changed in bulk by using the checkboxes in the task list for selection and the appropriate buttons above the task list.</p>"},{"location":"user-guide/tasks/#tasks-in-gramps-desktop","title":"Tasks in Gramps Desktop","text":"<p>When adding tasks via Gramps Web, both the sources and the notes will have the <code>ToDo</code> tag attached to them, so the tasks will show up in the desktop To Do Notes Gramplet as well as the To Do Report.</p> <p>To add or edit a task in Gramps Desktop, use the following guidelines</p> <ul> <li>Add a source with tag <code>ToDo</code> and the task title as title</li> <li>Optionally, add a note to the source with tag <code>ToDo</code>, type \"To Do\", and the description as text</li> <li>Add an attribute \"Status\" and set it to \"Open\", \"In Progress\", \"Blocked\", or \"Done\"</li> <li>Add an attribute \"Priority\" and set it to 9 for low, 5 for medium, or 1 for high (these counter-intuitive values are taken from the iCalendar specification)</li> </ul>"}]}